# 指定 docker 镜像
image: a/b/node:8000

# 定义场景执行阶段，元素的顺序决定了任务执行的顺讯
stages:
  # 创建文件夹 安装最外层依赖
  - create_dir 
  # 打包所有项目
  - node_build_all
  # 构建 docker 镜像
  - docker_build_dev
  # 清除缓存
  - clean-cache  

# 任务执行前的命令
before_script:
  - *auto_devops


create_dir:
 stage: create_dir
 script:
   #  根目录下创建文件夹
   - mkdir -p 
   #  复制最外层文件夹到创建好的根目录下
   - cp -r 
   - ls 
   #  安装最外层依赖 concurrently
   - npm install

node_build_all:
  stage: node_build_all
  script:
    - npm run build:all
    - ls 
    - cp -r 
    - ls 
  when: manual

# 相当于公用函数，有重复执行的任务时调用 相当于定义了一个名为 docker_build 的函数
.docker_build: &docker_build  
  image: 指定 docker 镜像
  script:
    - docker_build
    - chart_build
  when: manual

# 构建 docker 镜像到开发环境
docker_build_dev:
  <<: *docker_build  # 合并 docker_build 函数
  stage: docker_build_dev

# 缓存
clean-cache:
  stage: clean-cache
  script:
    - rm -rf /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    - clean_cache //此函数在devops.sh中
  when: manual


.auto_devops: &auto_devops |      
    # 设置 npm 镜像源
    function set_registry(){
        npm config set registry https://registry.npm.taobao.org
    }

    # 构建 docker
    function docker_build(){
        export CI_COMMIT_TAG="$C7N_VERSION"
        cp -rf  /cache/${CI_PROJECT_NAME}-${CI_PROJECT_ID}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}/* ${1:-"."}/ || true
        docker build -t ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG} ${1:-"."}
        docker login -u ${DOCKER_USER} -p ${DOCKER_PWD} ${DOCKER_REGISTRY}
        docker push ${DOCKER_REGISTRY}/${GROUP_NAME}/${PROJECT_NAME}:${CI_COMMIT_TAG}
    }

